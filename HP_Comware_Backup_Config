from netmiko.ssh_exception import NetMikoTimeoutException
from paramiko.ssh_exception import SSHException
from netmiko.ssh_exception import AuthenticationException
from netmiko import ConnectHandler
import datetime
from netmiko.cisco_base_connection import CiscoSSHConnection
from netmiko.hp import HPProcurveSSH, HPProcurveTelnet, HPComwareSSH, HPComwareTelnet


realtime = datetime.datetime.now().strftime("%Y.%m.%d_%H-%M-%S")
with open('campus.lines') as f:         
    devices_list = f.read().splitlines()                               

def enable(self, *args, **kwargs):
    return super(HPComwareSSH, self).enable(check_string='super')


for devices in devices_list:                                               
    print ('Connecting to device" ' + devices)
    ip_address_of_device = devices
    hp_comware = {
        'device_type': 'hp_comware',
        'ip': ip_address_of_device,
        'username': 'admin',
        'password': 'admin'
        }
    
    try:
        net_connect = ConnectHandler(**hp_comware)
    except (AuthenticationException):
        print('Authentication failure: ' + ip_address_of_device)
        continue
    except (NetMikoTimeoutException):
        print ('Timeout to device: ' + ip_address_of_device)
        continue
    except (EOFError):
        print ('End of file while attempting device ' + ip_address_of_device)
        continue
    except (SSHException):
        print ('SSH Issue. Are you sure SSH is enabled? ' + ip_address_of_device)
        continue
    except Exception as unknown_error:
        print ('Some other error: ' + str(unknown_error))
        continue


        
    print('\n Initiate Backup Configuration \n')
    devnet=net_connect.write_channel('super\nxxxxxxxxx\n')
    output=net_connect.send_command_timing("screen-length disable")
    hostname=net_connect.find_prompt()
    output=net_connect.send_command_timing("dis cur")
    print(output)
    

    file_backup=open(hostname.strip("<>") + '_' + ip_address_of_device + '_' + str(realtime) + '.txt', 'w', encoding='utf8')
    file_backup.write(output)
    file_backup.close()
    print("===Finished Backup's NetDevOps===")

